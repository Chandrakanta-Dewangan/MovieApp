// Generated by dagger.internal.codegen.ComponentProcessor (https://google.github.io/dagger).
package com.example.moviedemoapp.di.component;

import android.app.Activity;
import android.app.Application;
import android.app.Fragment;
import android.app.Service;
import android.arch.lifecycle.ViewModel;
import android.content.BroadcastReceiver;
import android.content.ContentProvider;
import com.example.moviedemoapp.data.rest.APIRepo;
import com.example.moviedemoapp.data.rest.APIRepoRepository;
import com.example.moviedemoapp.data.rest.APIRepoRepository_Factory;
import com.example.moviedemoapp.di.modules.ActivityBindingModule_BindAtMainActivity;
import com.example.moviedemoapp.di.modules.ApplicationModule_ProvideRetrofitFactory;
import com.example.moviedemoapp.di.modules.ApplicationModule_ProvideRetrofitServiceFactory;
import com.example.moviedemoapp.di.modules.FragmentBindingModule_ProvideDetailsFragment;
import com.example.moviedemoapp.di.modules.FragmentBindingModule_ProvideListFragment;
import com.example.moviedemoapp.util.ViewModelFactory;
import com.example.moviedemoapp.view.activity.MovieHomeActivity;
import com.example.moviedemoapp.view.base.BaseApplication;
import com.example.moviedemoapp.view.fragments.MovieDetailsFragment;
import com.example.moviedemoapp.view.fragments.MovieDetailsFragment_MembersInjector;
import com.example.moviedemoapp.view.fragments.MovieListFragment;
import com.example.moviedemoapp.view.fragments.MovieListFragment_MembersInjector;
import com.example.moviedemoapp.viewmodel.MovieDetailsViewModel;
import com.example.moviedemoapp.viewmodel.MovieDetailsViewModel_Factory;
import com.example.moviedemoapp.viewmodel.MovieListViewModel;
import com.example.moviedemoapp.viewmodel.MovieListViewModel_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.android.support.DaggerAppCompatActivity_MembersInjector;
import dagger.android.support.DaggerApplication;
import dagger.android.support.DaggerFragment_MembersInjector;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import retrofit2.Retrofit;

public final class DaggerApplicationComponent implements ApplicationComponent {
  private Provider<ActivityBindingModule_BindAtMainActivity.MovieHomeActivitySubcomponent.Builder>
      movieHomeActivitySubcomponentBuilderProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<APIRepo> provideRetrofitServiceProvider;

  private DaggerApplicationComponent(Builder builder) {
    initialize(builder);
  }

  public static ApplicationComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(
                MovieHomeActivity.class, (Provider) movieHomeActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  private DispatchingAndroidInjector<BroadcastReceiver>
      getDispatchingAndroidInjectorOfBroadcastReceiver() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends BroadcastReceiver>,
                Provider<AndroidInjector.Factory<? extends BroadcastReceiver>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<Service> getDispatchingAndroidInjectorOfService() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends Service>, Provider<AndroidInjector.Factory<? extends Service>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<ContentProvider>
      getDispatchingAndroidInjectorOfContentProvider() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends ContentProvider>,
                Provider<AndroidInjector.Factory<? extends ContentProvider>>>
                emptyMap());
  }

  private DispatchingAndroidInjector<android.support.v4.app.Fragment>
      getDispatchingAndroidInjectorOfFragment2() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        Collections
            .<Class<? extends android.support.v4.app.Fragment>,
                Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
                emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.movieHomeActivitySubcomponentBuilderProvider =
        new Provider<
            ActivityBindingModule_BindAtMainActivity.MovieHomeActivitySubcomponent.Builder>() {
          @Override
          public ActivityBindingModule_BindAtMainActivity.MovieHomeActivitySubcomponent.Builder
              get() {
            return new MovieHomeActivitySubcomponentBuilder();
          }
        };
    this.provideRetrofitProvider =
        DoubleCheck.provider(ApplicationModule_ProvideRetrofitFactory.create());
    this.provideRetrofitServiceProvider =
        DoubleCheck.provider(
            ApplicationModule_ProvideRetrofitServiceFactory.create(provideRetrofitProvider));
  }

  @Override
  public void inject(DaggerApplication arg0) {
    injectDaggerApplication(arg0);
  }

  @Override
  public void inject(BaseApplication application) {
    injectBaseApplication(application);
  }

  private DaggerApplication injectDaggerApplication(DaggerApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private BaseApplication injectBaseApplication(BaseApplication instance) {
    DaggerApplication_MembersInjector.injectActivityInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    DaggerApplication_MembersInjector.injectBroadcastReceiverInjector(
        instance, getDispatchingAndroidInjectorOfBroadcastReceiver());
    DaggerApplication_MembersInjector.injectFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment());
    DaggerApplication_MembersInjector.injectServiceInjector(
        instance, getDispatchingAndroidInjectorOfService());
    DaggerApplication_MembersInjector.injectContentProviderInjector(
        instance, getDispatchingAndroidInjectorOfContentProvider());
    DaggerApplication_MembersInjector.injectSetInjected(instance);
    dagger.android.support.DaggerApplication_MembersInjector.injectSupportFragmentInjector(
        instance, getDispatchingAndroidInjectorOfFragment2());
    return instance;
  }

  private static final class Builder implements ApplicationComponent.Builder {
    private Application application;

    @Override
    public ApplicationComponent build() {
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerApplicationComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MovieHomeActivitySubcomponentBuilder
      extends ActivityBindingModule_BindAtMainActivity.MovieHomeActivitySubcomponent.Builder {
    private MovieHomeActivity seedInstance;

    @Override
    public ActivityBindingModule_BindAtMainActivity.MovieHomeActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(
            MovieHomeActivity.class.getCanonicalName() + " must be set");
      }
      return new MovieHomeActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MovieHomeActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MovieHomeActivitySubcomponentImpl
      implements ActivityBindingModule_BindAtMainActivity.MovieHomeActivitySubcomponent {
    private Provider<
            FragmentBindingModule_ProvideListFragment.MovieListFragmentSubcomponent.Builder>
        movieListFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBindingModule_ProvideDetailsFragment.MovieDetailsFragmentSubcomponent.Builder>
        movieDetailsFragmentSubcomponentBuilderProvider;

    private MovieHomeActivitySubcomponentImpl(MovieHomeActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<
            Class<? extends android.support.v4.app.Fragment>,
            Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends android.support.v4.app.Fragment>,
              Provider<AndroidInjector.Factory<? extends android.support.v4.app.Fragment>>>
              newMapBuilder(2)
          .put(MovieListFragment.class, (Provider) movieListFragmentSubcomponentBuilderProvider)
          .put(
              MovieDetailsFragment.class,
              (Provider) movieDetailsFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<android.support.v4.app.Fragment>
        getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MovieHomeActivitySubcomponentBuilder builder) {
      this.movieListFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBindingModule_ProvideListFragment.MovieListFragmentSubcomponent.Builder>() {
            @Override
            public FragmentBindingModule_ProvideListFragment.MovieListFragmentSubcomponent.Builder
                get() {
              return new MovieListFragmentSubcomponentBuilder();
            }
          };
      this.movieDetailsFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBindingModule_ProvideDetailsFragment.MovieDetailsFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBindingModule_ProvideDetailsFragment.MovieDetailsFragmentSubcomponent
                    .Builder
                get() {
              return new MovieDetailsFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MovieHomeActivity arg0) {
      injectMovieHomeActivity(arg0);
    }

    private MovieHomeActivity injectMovieHomeActivity(MovieHomeActivity instance) {
      DaggerAppCompatActivity_MembersInjector.injectSupportFragmentInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      DaggerAppCompatActivity_MembersInjector.injectFrameworkFragmentInjector(
          instance, DaggerApplicationComponent.this.getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class MovieListFragmentSubcomponentBuilder
        extends FragmentBindingModule_ProvideListFragment.MovieListFragmentSubcomponent.Builder {
      private MovieListFragment seedInstance;

      @Override
      public FragmentBindingModule_ProvideListFragment.MovieListFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              MovieListFragment.class.getCanonicalName() + " must be set");
        }
        return new MovieListFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(MovieListFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MovieListFragmentSubcomponentImpl
        implements FragmentBindingModule_ProvideListFragment.MovieListFragmentSubcomponent {
      private Provider<APIRepoRepository> aPIRepoRepositoryProvider;

      private Provider<MovieListViewModel> movieListViewModelProvider;

      private MovieListFragmentSubcomponentImpl(MovieListFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(MovieListViewModel.class, (Provider) movieListViewModelProvider)
            .put(MovieDetailsViewModel.class, (Provider) MovieDetailsViewModel_Factory.create())
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final MovieListFragmentSubcomponentBuilder builder) {
        this.aPIRepoRepositoryProvider =
            APIRepoRepository_Factory.create(
                DaggerApplicationComponent.this.provideRetrofitServiceProvider);
        this.movieListViewModelProvider =
            MovieListViewModel_Factory.create(aPIRepoRepositoryProvider);
      }

      @Override
      public void inject(MovieListFragment arg0) {
        injectMovieListFragment(arg0);
      }

      private MovieListFragment injectMovieListFragment(MovieListFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            MovieHomeActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        MovieListFragment_MembersInjector.injectViewModelFactory(instance, getViewModelFactory());
        return instance;
      }
    }

    private final class MovieDetailsFragmentSubcomponentBuilder
        extends FragmentBindingModule_ProvideDetailsFragment.MovieDetailsFragmentSubcomponent
            .Builder {
      private MovieDetailsFragment seedInstance;

      @Override
      public FragmentBindingModule_ProvideDetailsFragment.MovieDetailsFragmentSubcomponent build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              MovieDetailsFragment.class.getCanonicalName() + " must be set");
        }
        return new MovieDetailsFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(MovieDetailsFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class MovieDetailsFragmentSubcomponentImpl
        implements FragmentBindingModule_ProvideDetailsFragment.MovieDetailsFragmentSubcomponent {
      private Provider<APIRepoRepository> aPIRepoRepositoryProvider;

      private Provider<MovieListViewModel> movieListViewModelProvider;

      private MovieDetailsFragmentSubcomponentImpl(
          MovieDetailsFragmentSubcomponentBuilder builder) {
        initialize(builder);
      }

      private Map<Class<? extends ViewModel>, Provider<ViewModel>>
          getMapOfClassOfAndProviderOfViewModel() {
        return MapBuilder.<Class<? extends ViewModel>, Provider<ViewModel>>newMapBuilder(2)
            .put(MovieListViewModel.class, (Provider) movieListViewModelProvider)
            .put(MovieDetailsViewModel.class, (Provider) MovieDetailsViewModel_Factory.create())
            .build();
      }

      private ViewModelFactory getViewModelFactory() {
        return new ViewModelFactory(getMapOfClassOfAndProviderOfViewModel());
      }

      @SuppressWarnings("unchecked")
      private void initialize(final MovieDetailsFragmentSubcomponentBuilder builder) {
        this.aPIRepoRepositoryProvider =
            APIRepoRepository_Factory.create(
                DaggerApplicationComponent.this.provideRetrofitServiceProvider);
        this.movieListViewModelProvider =
            MovieListViewModel_Factory.create(aPIRepoRepositoryProvider);
      }

      @Override
      public void inject(MovieDetailsFragment arg0) {
        injectMovieDetailsFragment(arg0);
      }

      private MovieDetailsFragment injectMovieDetailsFragment(MovieDetailsFragment instance) {
        DaggerFragment_MembersInjector.injectChildFragmentInjector(
            instance,
            MovieHomeActivitySubcomponentImpl.this.getDispatchingAndroidInjectorOfFragment());
        MovieDetailsFragment_MembersInjector.injectViewModelFactory(
            instance, getViewModelFactory());
        return instance;
      }
    }
  }
}
